/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   main.c
 * Author: nghia
 *
 * Created on November 16, 2020, 9:52 PM
 * 
 * Name: Nghia Huynh Lam
 * UTA ID: 1001699317
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
 * 
 */
double highestNumCases(int r,int c, double arr[][c]);

int main(int argc, char** argv) {
    char sName[10][20];
    double numCP[20][2];

    
    FILE *inputFile = fopen("USCOVID19Data.txt","r");
    
    if(inputFile == NULL)
    {
        return(EXIT_FAILURE);
    }
    
    printf("\nCOVID-19 state data for November 14, 2020\n\n");
    printf("%2s%10s%15s%12s\n\n","ST","Cases","Population","Percent");
    
    int index = 0;
    while(!feof(inputFile)&&(index < 21))
    {
        fscanf(inputFile,"%s %lf %lf",sName[index],&numCP[index][0],&numCP[index][1]);
        numCP[index][2] = numCP[index][0]/numCP[index][1];
        printf("%2s%10.0f%15.0f%12.6f\n",sName[index],numCP[index][0],numCP[index][1],numCP[index][2]);
        index++;
        
    }
    
    printf("\nAll data has been read from USCOVID19Data.txt\n");
    
    double highest = highestNumCases(20,2,numCP); 
    int test = 0;
    while (highest != numCP[test][0]) // test to see what row the number is located in
    {
        test++;
        printf("%d",test);
    }
    if(highest == numCP[test][0]) // prints out the values 
    {
        printf("\n%s has the highest number of cases at %.1f\n",sName[test],highest);
    }
  
    return (EXIT_SUCCESS);
}

//This method gets the highest number and returns it 
//To put a 2D array into a method you must have a restraint on the second value, so in arr[][c]<-- c is the restraint 
double highestNumCases(int r,int c, double arr[][c])
{
    int i = 0;
    double highest = 0;
    int col = 0;

    for(int i = 0; i < r; i++)
    {
        if(highest < arr[i][col])
        {
            highest = arr[i][col]; 
        }
    }
    return highest;  
}

